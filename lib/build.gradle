plugins {
  id 'antlr'
  id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
}

dependencies {
  api project(":api")
  implementation group: 'commons-io', name: 'commons-io', version: commonsIoVersion
  implementation group: 'commons-cli', name: 'commons-cli', version: commonsCliVersion
  implementation group: 'org.apache.commons', name: 'commons-csv', version: commonsCsvVersion
  implementation group: 'software.amazon.awssdk', name: 's3', version: awsVersion
  implementation group: 'software.amazon.awssdk', name: 'kinesis', version: awsVersion
  implementation group: 'com.opencsv', name: 'opencsv', version: opencsvVersion
  implementation group: 'org.apache.kafka', name: 'kafka-clients', version: kafkaVersion

  testImplementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion

  antlr "org.antlr:antlr4:${antlrVersion}"
}

generateGrammarSource {
  arguments << "-lib" << "src/main/antlr/io/fleak/zephflow/lib/antlr"
  arguments += ['-visitor', '-package', 'io.fleak.zephflow.lib.antlr']
  maxHeapSize = '64m'
  outputDirectory = file("${project.buildDir}/generated/sources/main/java")
  mustRunAfter tasks.named('licenseMain')
}

generateAvroJava {
  source('src/main/avro')
  outputDir = file("${buildDir}/generated/sources/main/java")
  mustRunAfter tasks.named('licenseMain')
}

sourceSets {
  main {
    java {
      srcDirs += "${project.buildDir}/generated/sources/main/java"
    }
  }
}

tasks.named('test') {
  useJUnitPlatform()
  testLogging.showStandardStreams = true
}

tasks.named('sourcesJar') {
  dependsOn 'generateGrammarSource'
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}