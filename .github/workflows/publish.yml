name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ "**" ]
  release:
    types: [ created ]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      checks: write
      pull-requests: write
      id-token: write # Required for keyless signing

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Important for nebula-release

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: JUnit Tests
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit

      - name: Generate JaCoCo Report
        run: ./gradlew jacocoTestReport

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false

      # Publish only the sdk module as SNAPSHOT
      - name: Publish SDK SNAPSHOT to GitHub Packages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: ./gradlew clean devSnapshot :sdk:publish # must do a clean to remove generated code to pass license check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Publish only the sdk module for releases
      - name: Publish SDK Release to GitHub Packages
        if: github.event_name == 'release'
        run: ./gradlew -Prelease.useLastTag=true :sdk:publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Install cosign for attestation signing
      - name: Install cosign
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        uses: sigstore/cosign-installer@v3.1.1

      # Set up QEMU for multi-architecture builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')

      ##### HTTPSTARTER DOCKER IMAGE #####

      # Build the httpstarter JAR
      - name: Build httpstarter JAR
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        run: ./gradlew :httpstarter:build

      # Extract metadata for httpstarter Docker
      - name: Extract httpstarter Docker metadata
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        id: meta-httpstarter
        uses: docker/metadata-action@v5
        with:
          images: fleak/zephflow-httpstarter
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}

      # Build and push httpstarter Docker image with attestations
      - name: Build and push httpstarter Docker image
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        uses: docker/build-push-action@v5
        with:
          context: ./httpstarter
          file: ./httpstarter/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-httpstarter.outputs.tags }}
          labels: ${{ steps.meta-httpstarter.outputs.labels }}
          build-args: |
            COMMIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max  # Add provenance attestation
          sbom: true            # Add SBOM attestation

      # Sign the httpstarter image with cosign
      - name: Sign httpstarter image with Cosign
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        run: |
          HTTPSTARTER_IMAGE_DIGEST=$(docker buildx imagetools inspect ${{ steps.meta-httpstarter.outputs.tags }} --format "{{json .Manifest}}" | jq -r '.digest')
          HTTPSTARTER_IMAGE_REFERENCE=$(echo ${{ steps.meta-httpstarter.outputs.tags }} | cut -d, -f1)
          cosign sign --yes "${HTTPSTARTER_IMAGE_REFERENCE}@${HTTPSTARTER_IMAGE_DIGEST}"

      ##### CLISTARTER DOCKER IMAGE #####

      # Build the clistarter JAR with shadowJar
      - name: Build clistarter JAR
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        run: ./gradlew :clistarter:shadowJar

      # Extract metadata for clistarter Docker
      - name: Extract clistarter Docker metadata
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        id: meta-clistarter
        uses: docker/metadata-action@v5
        with:
          images: fleak/zephflow-clistarter
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}

      # Build and push clistarter Docker image with attestations
      - name: Build and push clistarter Docker image
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        uses: docker/build-push-action@v5
        with:
          context: ./clistarter
          file: ./clistarter/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-clistarter.outputs.tags }}
          labels: ${{ steps.meta-clistarter.outputs.labels }}
          build-args: |
            COMMIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max  # Add provenance attestation
          sbom: true            # Add SBOM attestation

      # Sign the clistarter image with cosign
      - name: Sign clistarter image with Cosign
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        run: |
          CLISTARTER_IMAGE_DIGEST=$(docker buildx imagetools inspect ${{ steps.meta-clistarter.outputs.tags }} --format "{{json .Manifest}}" | jq -r '.digest')
          CLISTARTER_IMAGE_REFERENCE=$(echo ${{ steps.meta-clistarter.outputs.tags }} | cut -d, -f1)
          cosign sign --yes "${CLISTARTER_IMAGE_REFERENCE}@${CLISTARTER_IMAGE_DIGEST}"

      # Run Docker Scout to analyze the images
      - name: Docker Scout analysis
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        uses: docker/scout-action@v1
        with:
          command: quickview,cves,recommendations
          image: |
            ${{ steps.meta-httpstarter.outputs.tags }}
            ${{ steps.meta-clistarter.outputs.tags }}
          only-severities: critical,high
          sarif-file: docker-scout-results.sarif
          github-token: ${{ secrets.GITHUB_TOKEN }}