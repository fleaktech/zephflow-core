name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ "**" ]
  release:
    types: [ created ]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
      id-token: write # Required for keyless signing

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for nebula-release

      - name: Set up GraalVM JDK 21
        uses: graalvm/setup-graalvm@v1 # Check for the latest version of this action too
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }} # Required for rate limiting

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: JUnit Tests
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit

      - name: Generate JaCoCo Report
        run: ./gradlew jacocoTestReport

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false

      # Import GPG key for Maven Central publishing
      - name: Import GPG key
        if: github.event_name == 'release'
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # Test Publish SDK fat jar to GitHub Releases (and skip Maven Central)
      - name: Test SDK fat jar to GitHub Releases (NO Maven Central)
        # if: github.event_name == 'release'
        if: github.ref != 'refs/heads/main' && github.event_name != 'release'
        run: ./gradlew clean :sdk:shadowJar -Djreleaser.deployers.maven.mavenCentral.active=NEVER jreleaserDeploy
        env:
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Publish Release to Maven Central
      - name: Publish Release to Maven Central
        if: github.event_name == 'release'
        run: ./gradlew clean -Prelease.useLastTag=true sdk:publish runner:publish lib:publish api:publish -PenableMavenCentralDeploy=true jreleaserDeploy
        env:
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Install cosign for attestation signing
      - name: Install cosign
        if: github.event_name == 'release'
        uses: sigstore/cosign-installer@v3.3.0
        with:
          cosign-release: 'v2.2.3'  # Specific version that avoids the TUF key issue

      # Set up QEMU for multi-architecture builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: github.event_name == 'release'

      ##### HTTPSTARTER DOCKER IMAGE #####

      # Build the httpstarter JAR
      - name: Build httpstarter JAR
        if: github.event_name == 'release'
        run: ./gradlew :httpstarter:build

      # Extract metadata for httpstarter Docker
      - name: Extract httpstarter Docker metadata
        if: github.event_name == 'release'
        id: meta-httpstarter
        uses: docker/metadata-action@v5
        with:
          images: fleak/zephflow-httpstarter
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}

      # Build and push httpstarter Docker image with attestations
      - name: Build and push httpstarter Docker image
        if: github.event_name == 'release'
        uses: docker/build-push-action@v5
        with:
          context: ./httpstarter
          file: ./httpstarter/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-httpstarter.outputs.tags }}
          labels: ${{ steps.meta-httpstarter.outputs.labels }}
          build-args: |
            COMMIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max  # Add provenance attestation
          sbom: true            # Add SBOM attestation

      ##### CLISTARTER DOCKER IMAGE #####

      # Build the clistarter JAR with shadowJar
      - name: Build clistarter JAR
        if: github.event_name == 'release'
        run: ./gradlew :clistarter:shadowJar

      # Extract metadata for clistarter Docker
      - name: Extract clistarter Docker metadata
        if: github.event_name == 'release'
        id: meta-clistarter
        uses: docker/metadata-action@v5
        with:
          images: fleak/zephflow-clistarter
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}

      # Build and push clistarter Docker image with attestations
      - name: Build and push clistarter Docker image
        if: github.event_name == 'release'
        uses: docker/build-push-action@v5
        with:
          context: ./clistarter
          file: ./clistarter/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-clistarter.outputs.tags }}
          labels: ${{ steps.meta-clistarter.outputs.labels }}
          build-args: |
            COMMIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max  # Add provenance attestation
          sbom: true            # Add SBOM attestation
